<?php

namespace famima65536\lwe\entity;

use pocketmine\entity\animation\ArmSwingAnimation;
use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Zombie;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\item\VanillaItems;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;

class LightweightZombie extends Monster {


	public static function getNetworkTypeId() : string{ return EntityIds::ZOMBIE; }

	protected function getInitialSizeInfo() : EntitySizeInfo{
		return new EntitySizeInfo(1.8, 0.6); //TODO: eye height ??
	}

	public function getName() : string{
		return "Zombie";
	}

	public function getDrops() : array{
		$drops = [
			VanillaItems::ROTTEN_FLESH()->setCount(mt_rand(0, 2))
		];

		if(mt_rand(0, 199) < 5){
			$drops[] = match (mt_rand(0, 2)) {
				0 => VanillaItems::IRON_INGOT(),
				1 => VanillaItems::CARROT(),
				2 => VanillaItems::POTATO(),
			};
		}

		return $drops;
	}

	public function getXpDropAmount() : int{
		//TODO: check for equipment and whether it's a baby
		return 5;
	}


	public function actionAttack(): void{
		$this->actionAttackTime = 40;
		$target = $this->getTargetEntity();
		$ev = new EntityDamageByEntityEvent($this, $target, EntityDamageEvent::CAUSE_ENTITY_ATTACK, 1);
		$target->attack($ev);
		$this->broadcastAnimation(new ArmSwingAnimation($this));
	}

	protected function setTarget(?Entity $target){
		parent::setTarget($target); // TODO: Change the autogenerated stub
		$this->setTargetEntity($target);
	}
}