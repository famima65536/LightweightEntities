<?php

namespace famima65536\lwe\entity;

use famima65536\lwe\entity\utils\AttackTrait;
use famima65536\lwe\entity\utils\ChaseTargetTrait;
use famima65536\lwe\entity\utils\SearchEntityPolicy;
use famima65536\lwe\entity\utils\state\AttackingTargetState;
use famima65536\lwe\entity\utils\state\RandomWalkingState;
use famima65536\lwe\entity\utils\state\StateIds;
use famima65536\lwe\entity\utils\state\WaitingState;
use famima65536\lwe\entity\utils\TargetSelectorTrait;
use pocketmine\entity\Entity;
use pocketmine\entity\Location;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\nbt\tag\CompoundTag;

abstract class LightweightMonster extends LightweightLiving {
	use ChaseTargetTrait, AttackTrait, TargetSelectorTrait;

	protected float $attackDistance = 1;
	private SearchEntityPolicy $searchPolicy;

	public function __construct(Location $location, ?CompoundTag $nbt = null){
		$this->searchPolicy = new SearchEntityPolicy();
		parent::__construct($location, $nbt);
	}

	public function onUpdate(int $currentTick): bool{

		switch($this->stateManager->getState()->getId()){
			case StateIds::WAITING:
				break;
			case StateIds::RANDOM_WALKING:
				$this->moveStraight();
				break;
			case StateIds::ATTACKING_TARGET:
				/** @var AttackingTargetState $state */
				$state = $this->stateManager->getState();
				$this->chaseAndAttack($state->getTarget());
				break;
			default:
				break;
		}

		return parent::onUpdate($currentTick);
	}

	public function attack(EntityDamageEvent $source): void{
		parent::attack($source); // TODO: Change the autogenerated stub
		if(!$source->isCancelled() and $source instanceof EntityDamageByEntityEvent){
			$this->stateManager->setState(new AttackingTargetState($source->getDamager()));
		}
	}

	protected function onStateFinished(): void{
		$target = $this->target();
		if($target !== null){
			$this->stateManager->setState(new AttackingTargetState($target));
			return;
		}
		$random = mt_rand(0,10);
		$this->stateManager->setState(match (true){
			$random <= 8 => new WaitingState,
			$random <= 10 => new RandomWalkingState
		});
		if($this->stateManager->getState() instanceof RandomWalkingState){
			$this->setRotation(mt_rand(0, 360), 0);
		}
	}

	protected function chaseAndAttack(Entity $target){
		$this->lookAt($target->getLocation()->add(0, 0.7, 0));
		$this->tryActionAttack($target);
		$this->moveToward($target);
	}
}